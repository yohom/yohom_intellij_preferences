<templateSet group="Flutter">
  <template name="txt" value="style: Theme.of(context).textTheme" description="获取text theme" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="perform" value="Future&lt;void&gt; perform$biz$() {&#10;  $arguments$&#10;  &#10;  try {&#10;    Biz.check$biz$();&#10;  } catch (e) {&#10;    return Future.error(e);&#10;  }&#10;    &#10;  return Api.$request$();&#10;}" description="生成perform**模板" toReformat="false" toShortenFQNames="true">
    <variable name="biz" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="arguments" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="request" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="uni" value="static UniqueKey uniqueKey = UniqueKey();&#10;&#10;$name$() : super(key: uniqueKey);&#10;&#10;" description="生成UniqueKey" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="tw" value="import 'package:flutter_test/flutter_test.dart';&#10;import 'package:$package$main.dart';&#10;&#10;void main() {&#10;  testWidgets('$test_desc$', (WidgetTester tester) async {&#10;    await tester.pumpWidget($Widget$());&#10;  });&#10;}&#10;" description="生成testWidget模板" toReformat="false" toShortenFQNames="true">
    <variable name="package" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="test_desc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Widget" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="test" value="import 'package:flutter_test/flutter_test.dart';&#10;import 'package:$package$main.dart';&#10;&#10;void main() {&#10;  test('$test_desc$', () {&#10;    $content$&#10;  });&#10;}&#10;" description="生成unit test模板" toReformat="false" toShortenFQNames="true">
    <variable name="package" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="test_desc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="stless" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: $APP_BAR$,&#10;      body: $BODY$,&#10;    );&#10;  }&#10;}&#10;" description="New Stateless widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APP_BAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="stful" value="import 'package:flutter/material.dart';&#10;&#10;class $NAME$ extends StatefulWidget {&#10;  @override&#10;  _$NAME$State createState() =&gt; _$NAME$State();&#10;}&#10;&#10;class _$NAME$State extends State&lt;$NAME$&gt; {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: $APP_BAR$,&#10;      body: $BODY$,&#10;    );&#10;  }&#10;}&#10;" description="New Stateful widget" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="APP_BAR" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="BODY" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="screenstf" value="import 'package:flutter/material.dart';&#10;&#10;class $name$Screen extends StatefulWidget {&#10;  @override&#10;  _$name$ScreenState createState() =&gt; _$name$ScreenState();&#10;}&#10;&#10;class _$name$ScreenState extends State&lt;$name$Screen&gt; {&#10;&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Scaffold(&#10;      appBar: AppBar(title: Text('$name$')),&#10;      body: Center(child: Text('$name$')),&#10;    );&#10;  }&#10;}&#10;" description="生成screen模板代码" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="widget" value="class $NAME$ extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return Center(&#10;      child: Text('$NAME$'),&#10;    );&#10;  }&#10;}&#10;" description="生成widget模板代码" toReformat="false" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="testWidget" value="import 'package:flutter_test/flutter_test.dart';&#10;&#10;import '../app_shell.dart';&#10;&#10;void main() {&#10;  testWidgets('$desc$', (tester) async {&#10;    await tester.pumpWidget(AppShell($target$()));&#10;    &#10;    $content$&#10;  });&#10;}&#10;" description="生成widget test模板" toReformat="false" toShortenFQNames="true">
    <variable name="desc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="target" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="content" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="const" value="const $name$(): super(key: $key$);" description="生成const构造器" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="key" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="path" value="static const String path = '/$path$';" description="生成Screen的path" toReformat="false" toShortenFQNames="true">
    <variable name="path" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="singleton" value="static $type$ _instance;&#10;&#10;$type$._();&#10;&#10;factory $type$() {&#10;  if (_instance == null) {&#10;    _instance = $type$._();&#10;    return _instance;&#10;  } else {&#10;    return _instance;&#10;  }&#10;}" description="生成单例模板" toReformat="false" toShortenFQNames="true">
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
    </context>
  </template>
  <template name="part" value="part of 'bean.export.dart';" description="生成part of 'bean.export.dart'" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="screenstl" value="import 'package:flutter/material.dart';&#10;import 'package:decorated_flutter/decorated_flutter.dart';&#10;import '../../bloc/bloc.export.dart';&#10;&#10;class $name$Screen extends StatelessWidget {&#10;  @override&#10;  Widget build(BuildContext context) {&#10;    return RuntimeScaffold&lt;$name$BLoC&gt;(&#10;      appBar: AppBar(title: Text('$name$')),&#10;      body: Center(child: Text('$name$')),&#10;    );&#10;  }&#10;}&#10;&#10;" description="生成screen简版模板代码" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="kiwi" value="import 'package:kiwi/kiwi.dart' as kiwi;&#10;" description="生成kiwi导入" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_TOPLEVEL" value="true" />
    </context>
  </template>
  <template name="decor" value="DecoratedRoute&lt;$bloc$&gt;(screen: $screen$Screen());" description="生成DecoratedScreen" toReformat="false" toShortenFQNames="true">
    <variable name="bloc" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="screen" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="api" value="@visibleForTesting&#10;static final Api api = Injector.obtain();" description="生成api对象" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="param" value="final param = Param()..action = $action$..baseInfo()..putParamMap({$params$});" description="生成Param模板" toReformat="false" toShortenFQNames="true">
    <variable name="action" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="params" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="biz" value="try {&#10;      Biz.$method$($argument$);&#10;    } catch (e) {&#10;      return Future.error(e);&#10;    }" description="生成Biz模板" toReformat="false" toShortenFQNames="true">
    <variable name="method" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="argument" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="of" value="static $Type$ of(BuildContext context) {&#10;  return (context.ancestorWidgetOfExactType($Ancestor$) as $Ancestor$).data;&#10;}" description="生成of方法" toReformat="false" toShortenFQNames="true">
    <variable name="Type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="Ancestor" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_STATEMENT" value="false" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
  <template name="catch" value="catchError(handle(context));" description="生成catchError(handle(context))" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="DART_STATEMENT" value="true" />
    </context>
  </template>
  <template name="handle" value="() =&gt; _handle$name$(context)" description="" toReformat="false" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="DART" value="true" />
      <option name="DART_TOPLEVEL" value="false" />
    </context>
  </template>
</templateSet>